{"ast":null,"code":"/* \n1. In the first line of code, we import React which is a JavaScript library that is used to build user interfaces. You can find more information about React at https://reactjs.org/.\n2. In the second line of code, we import the React Component class that is used to create React components.\n3. In the third line of code, we create a class called JugadoresPagina that extends the Component class. The Component class is used to create React components.\n4. In the fourth line of code, we create a constructor that takes props as a parameter. Props are used to pass data from one component to another. The constructor is called when a component is initialized.\n5. In the fifth line of code, we initialize the state object. The state object is used to store property values that belongs to the component. In this case, we initialize an empty array for the jugador property.\n6. In the sixth line of code, we define a method called componentDidMount. The componentDidMount method is called when the component is loaded. \n7. In the seventh line of code, we use the fetch method to make a GET request to the API. The fetch method is used to make HTTP requests. The fetch method takes a URL as a parameter. In this case, we make a GET request to the API at https://api.football-data.org/v2/competitions/CL/teams.\n8. In the eighth line of code, we use the then method to get the response from the API. The then method is used to handle the response from the API. The then method takes a callback function as a parameter. In this case, we use the then method to get the response from the API and convert it to JSON.\n9. In the ninth line of code, we use the setState method to set the state of the jugador property. The setState method is used to change the state of a component. The setState method takes an object as a parameter. In this case, we use the setState method to set the state of the jugador property to the data that we get from the API.\n10. In the tenth line of code, we use the catch method to handle errors. The catch method is used to handle errors. The catch method takes a callback function as a parameter. In this case, we use the catch method to handle errors.\n11. In the eleventh line of code, we use the render method to render the component. The render method is used to render the component. The render method returns a JSX element. In this case, we use the render method to render the component.\n12. In the twelfth line of code, we use the map method to loop through the jugador property. The map method is used to loop through an array. The map method takes a callback function as a parameter. In this case, we use the map method to loop through the jugador property.\n13. In the thirteenth line of code, we use the return keyword to return a JSX element. In this case, we use the return keyword to return a JSX element that contains a table row element.\n14. In the fourteenth line of code, we use the td element to display the name property of the jugador object. In this case, we use the td element to display the name property of the jugador object.\n15. In the fifteenth line of code, we use the td element to display the tla property of the jugador object. In this case, we use the td element to display the tla property of the jugador object.\n16. In the sixteenth line of code, we use the td element to display the crestUrl property of the jugador object. In this case, we use the td element to display the crestUrl property of the jugador object.\n17. In the seventeenth line of code, we use the td element to display the address property of the jugador object. In this case, we use the td element to display the address property of the jugador object.\n18. In the eighteenth line of code, we use the td element to display the phone property of the jugador object. In this case, we use the td element to display the phone property of the jugador object.\n19. In the nineteenth line of code, we use the td element to display the website property of the jugador object. In this case, we use the td element to display the website property of the jugador object.\n20. In the twentieth line of code, we use the td element to display the email property of the jugador object. In this case, we use the td element to display the email property of the jugador object.\n21. In the twenty-first line of code, we use the td element to display the founded property of the jugador object. In this case, we use the td element to display the founded property of the jugador object.\n22. In the twenty-second line of code, we use the td element to display the clubColors property of the jugador object. In this case, we use the td element to display the clubColors property of the jugador object.\n23. In the twenty-third line of code, we use the td element to display the venue property of the jugador object. In this case, we use the td element to display the venue property of the jugador object.\n24. In the twenty-fourth line of code, we use the td element to display the lastUpdated property of the jugador object. In this case, we use the td element to display the lastUpdated property of the jugador object.\n25. In the twenty-fifth line of code, we use the td element to display the area property of the jugador object. In this case, we use the td element to display the area property of the jugador object.\n26. In the twenty-sixth line of code, we use the td element to display the squad property of the jugador object. In this case, we use the td element to display the squad property of the jugador object.\n27. In the twenty-seventh line of code, we use the td element to display the coach property of the jugador object. In this case, we use the td element to display the coach property of the jugador object.\n28. In the twenty-eighth line of code, we use the td element to display the website property of the jugador object. In this case, we use the td element to display the website property of the jugador object.\n29. In the twenty-ninth line of code, we use the td element to display the website property of the jugador object. In this case, we use the td element to display the website property of the jugador object.\n30. In the thirtieth line of code, we export the JugadoresPagina class. The export\n31. Fetch data from API https://www.thesportsdb.com/api/v1/json/2/lookupplayer.php?id=34162040\n32. The result should be like this: https://www.thesportsdb.com/player/34162040\n*/","map":{"version":3,"names":[],"sources":["/Users/macmini/Desktop/Lumetrio/artio/src/paginas/JugadoresPagina.js"],"sourcesContent":["/* \n1. In the first line of code, we import React which is a JavaScript library that is used to build user interfaces. You can find more information about React at https://reactjs.org/.\n2. In the second line of code, we import the React Component class that is used to create React components.\n3. In the third line of code, we create a class called JugadoresPagina that extends the Component class. The Component class is used to create React components.\n4. In the fourth line of code, we create a constructor that takes props as a parameter. Props are used to pass data from one component to another. The constructor is called when a component is initialized.\n5. In the fifth line of code, we initialize the state object. The state object is used to store property values that belongs to the component. In this case, we initialize an empty array for the jugador property.\n6. In the sixth line of code, we define a method called componentDidMount. The componentDidMount method is called when the component is loaded. \n7. In the seventh line of code, we use the fetch method to make a GET request to the API. The fetch method is used to make HTTP requests. The fetch method takes a URL as a parameter. In this case, we make a GET request to the API at https://api.football-data.org/v2/competitions/CL/teams.\n8. In the eighth line of code, we use the then method to get the response from the API. The then method is used to handle the response from the API. The then method takes a callback function as a parameter. In this case, we use the then method to get the response from the API and convert it to JSON.\n9. In the ninth line of code, we use the setState method to set the state of the jugador property. The setState method is used to change the state of a component. The setState method takes an object as a parameter. In this case, we use the setState method to set the state of the jugador property to the data that we get from the API.\n10. In the tenth line of code, we use the catch method to handle errors. The catch method is used to handle errors. The catch method takes a callback function as a parameter. In this case, we use the catch method to handle errors.\n11. In the eleventh line of code, we use the render method to render the component. The render method is used to render the component. The render method returns a JSX element. In this case, we use the render method to render the component.\n12. In the twelfth line of code, we use the map method to loop through the jugador property. The map method is used to loop through an array. The map method takes a callback function as a parameter. In this case, we use the map method to loop through the jugador property.\n13. In the thirteenth line of code, we use the return keyword to return a JSX element. In this case, we use the return keyword to return a JSX element that contains a table row element.\n14. In the fourteenth line of code, we use the td element to display the name property of the jugador object. In this case, we use the td element to display the name property of the jugador object.\n15. In the fifteenth line of code, we use the td element to display the tla property of the jugador object. In this case, we use the td element to display the tla property of the jugador object.\n16. In the sixteenth line of code, we use the td element to display the crestUrl property of the jugador object. In this case, we use the td element to display the crestUrl property of the jugador object.\n17. In the seventeenth line of code, we use the td element to display the address property of the jugador object. In this case, we use the td element to display the address property of the jugador object.\n18. In the eighteenth line of code, we use the td element to display the phone property of the jugador object. In this case, we use the td element to display the phone property of the jugador object.\n19. In the nineteenth line of code, we use the td element to display the website property of the jugador object. In this case, we use the td element to display the website property of the jugador object.\n20. In the twentieth line of code, we use the td element to display the email property of the jugador object. In this case, we use the td element to display the email property of the jugador object.\n21. In the twenty-first line of code, we use the td element to display the founded property of the jugador object. In this case, we use the td element to display the founded property of the jugador object.\n22. In the twenty-second line of code, we use the td element to display the clubColors property of the jugador object. In this case, we use the td element to display the clubColors property of the jugador object.\n23. In the twenty-third line of code, we use the td element to display the venue property of the jugador object. In this case, we use the td element to display the venue property of the jugador object.\n24. In the twenty-fourth line of code, we use the td element to display the lastUpdated property of the jugador object. In this case, we use the td element to display the lastUpdated property of the jugador object.\n25. In the twenty-fifth line of code, we use the td element to display the area property of the jugador object. In this case, we use the td element to display the area property of the jugador object.\n26. In the twenty-sixth line of code, we use the td element to display the squad property of the jugador object. In this case, we use the td element to display the squad property of the jugador object.\n27. In the twenty-seventh line of code, we use the td element to display the coach property of the jugador object. In this case, we use the td element to display the coach property of the jugador object.\n28. In the twenty-eighth line of code, we use the td element to display the website property of the jugador object. In this case, we use the td element to display the website property of the jugador object.\n29. In the twenty-ninth line of code, we use the td element to display the website property of the jugador object. In this case, we use the td element to display the website property of the jugador object.\n30. In the thirtieth line of code, we export the JugadoresPagina class. The export\n31. Fetch data from API https://www.thesportsdb.com/api/v1/json/2/lookupplayer.php?id=34162040\n32. The result should be like this: https://www.thesportsdb.com/player/34162040\n*/\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}